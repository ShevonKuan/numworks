# main.yml

# Workflow's name
name: Build Electron App For WinMac

# Workflow's trigger
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

# Workflow's jobs
jobs:
  # job's id
  release:
    # job's name
    name: build and release electron app

    # the type of machine to run the job on
    runs-on: ${{ matrix.os }}

    # create a build matrix for jobs
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest]

    # create steps
    steps:
      # step1: check out repository
      - name: Check out git repository
        uses: actions/checkout@v3

      # step2: install node env
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      # step3: npm install
      - name: npm install
        run: |
          npm install

      # step4: build app for mac/win
      - name: build windows app
        if: matrix.os == 'windows-latest'
        run: |
          npm run build-win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: build mac app
        if: matrix.os == 'macos-latest'
        run: |
          npm run build-mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # step5: cleanup artifacts in dist_electron
      - name: cleanup artifacts for windows
        if: matrix.os == 'windows-latest'
        run: |
          npx rimraf "dist/!(*.exe)"

      - name: cleanup artifacts for macosZ
        if: matrix.os == 'macos-latest'
        run: |
          npx rimraf "dist/!(*.dmg)"

      # step6: upload artifacts
      - name: upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}
          path: dist

      # step7: create release
      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v5.1
      - name: Print branch    
        run: |
          echo "Running on default: ${{ steps.branch-name.outputs.current_branch }}"
        
      - name: Download dist from build
        uses: actions/download-artifact@v1
        with:
          name: ${{ matrix.os }}
          path: dist

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: ${{ github.event.repository.name }}  ${{ steps.branch-name.outputs.current_branch }} v${{ github.run_number }}.${{ github.run_attempt }}

      - name: Upload Release
        id: upload_release_asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ matrix.os }}
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist
          asset_name: ${{ matrix.os }}.zip
          asset_content_type: application/zip