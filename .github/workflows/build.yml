# main.yml

# Workflow's name
name: Build Electron App For WinMac

# Workflow's trigger
on:
    push:
        tags: [v*]
    schedule:
        - cron: "0 0 */5 * *"
    workflow_dispatch:
# Workflow's jobs
jobs:
    android:
        name: Build latest android app
        runs-on: ubuntu-latest
        if: ${{ (github.repository != 'numworks/epsilon-internal') }}
        steps:
        - run: $ANDROID_HOME/tools/bin/sdkmanager "ndk;22.1.7171670"
        - uses: actions/checkout@v3
        - run: |
                  git submodule init
                  git submodule update
                  cd epsilon
                  latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
                  git checkout $latest_tag
                  sed -i 's/const char\* Ion::pcbVersion() { return "00.00"; }/const char* Ion::pcbVersion() { return "build by shevon"; }/' ion/src/shared/dummy/platform_info.cpp
                    sed -i 's/FccId = "FCC ID"/FccId = "Build info"/' apps/shared.universal.i18n
                    sed -i 's/const char\* Ion::fccId() { return "NA"; }/const char* Ion::fccId() { return "Build by Shevon"; }/' ion/src/shared/dummy/fcc_id.cpp
                    sudo apt-get install \
                    build-essential \
                    clang-format \
                    git \
                    imagemagick \
                    libfreetype6-dev \
                    libjpeg-dev \
                    libpng-dev \
                    libx11-dev \
                    libxext-dev \
                    pkg-config \
                    python3 \
                    python3-pip \
                    python3-venv
                    python3 -m venv .venv
                    .venv/bin/pip3 install \
                        lz4 \
                        pyelftools \
                        pypng \
                        stringcase
                     make PLATFORM=simulator TARGET=android ASSERTIONS=1 epsilon.apk test.apk
        - uses: actions/upload-artifact@v2
          with:
            name: epsilon-android.apk
            path: epsilon/output/release/simulator/android/epsilon.apk
    web:
        name: Build latest epsilon.js
        runs-on: ${{ (github.repository == 'numworks/epsilon-internal') && 'self-hosted' || 'ubuntu-latest' }}
        steps:
            - id: build_epsilonjs
              uses: numworks/setup-emscripten@latest
              with:
                  sdk: 1.39.16-fastcomp
            - uses: actions/checkout@v3
            - run: |
                  git submodule init
                  git submodule update
                  cd epsilon
                  latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
                  git checkout $latest_tag
                  sed -i 's/const char\* Ion::pcbVersion() { return "00.00"; }/const char* Ion::pcbVersion() { return "build by shevon"; }/' ion/src/shared/dummy/platform_info.cpp
                    sed -i 's/FccId = "FCC ID"/FccId = "Build info"/' apps/shared.universal.i18n
                    sed -i 's/const char\* Ion::fccId() { return "NA"; }/const char* Ion::fccId() { return "Build by Shevon"; }/' ion/src/shared/dummy/fcc_id.cpp
                    sudo apt-get install \
                    build-essential \
                    clang-format \
                    git \
                    imagemagick \
                    libfreetype6-dev \
                    libjpeg-dev \
                    libpng-dev \
                    libx11-dev \
                    libxext-dev \
                    pkg-config \
                    python3 \
                    python3-pip \
                    python3-venv
                    python3 -m venv .venv
                    .venv/bin/pip3 install \
                        lz4 \
                        pyelftools \
                        pypng \
                        stringcase
                    make PLATFORM=simulator TARGET=web ASSERTIONS=1 epsilon.zip test.js
                    timeout 5m node output/release/simulator/web/test.js --headless --limit-stack-usage
            - uses: actions/upload-artifact@v3
              with:
                  name: epsilon.js
                  path: epsilon/output/release/simulator/web/epsilon.js
                  retention-days: 7
            - uses: actions/upload-artifact@v3
              with:
                  name: epsilon-web.zip
                  path: epsilon/output/release/simulator/web/epsilon.zip
                  retention-days: 7

    release:
        # job's name
        name: build and release electron app
        needs: web
        # the type of machine to run the job on
        runs-on: ${{ matrix.os }}

        # create a build matrix for jobs
        strategy:
            fail-fast: false
            matrix:
                os: [windows-latest, macos-latest, ubuntu-latest]

        # create steps
        steps:
            # step1: check out repository & download epsilonjs
            - name: Check out git repository
              uses: actions/checkout@v3

            - name: Download epsilon.js
              uses: actions/download-artifact@v3
              with:
                  name: epsilon.js
                  path: epsilon.js

            # step2: install node env
            - name: Install Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ matrix.node-version }}

            # step3: npm install
            - name: npm install
              run: |
                  npm install

            # step4: build app for mac/win
            - name: build windows app
              if: matrix.os == 'windows-latest'
              run: |
                  npm run build-win
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: build mac app
              if: matrix.os == 'macos-latest'
              run: |
                  npm run build-mac
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: build liunx app
              if: matrix.os == 'ubuntu-latest'
              run: |
                  npm run build-linux
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            # step5: cleanup artifacts in dist_electron
            - name: cleanup artifacts for windows
              if: matrix.os == 'windows-latest'
              run: |
                  npx rimraf "dist/!(*.exe)"

            - name: cleanup artifacts for macosZ
              if: matrix.os == 'macos-latest'
              run: |
                  npx rimraf "dist/!(*.dmg)"

            - name: cleanup artifacts for macosZ
              if: matrix.os == 'ubuntu-latest'
              run: |
                  npx rimraf "dist/!(*.AppImage)"

            # step6: upload artifacts
            - name: upload artifacts
              uses: actions/upload-artifact@v2
              with:
                  name: ${{ matrix.os }}
                  path: dist

            # step7: create release
            - name: Release
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: ${{ github.ref }}-E-${{ steps.build_epsilonjs.outputs.latest_tag }}
                  body: epsilon Version ${{ steps.build_epsilonjs.outputs.latest_tag }}
                  files: |
                    dist/**
                    epsilon-web.zip
                    epsilon-android.apk
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            # step7: create release

            # - name: Create Release
            #   id: create_release
            #   uses: actions/create-release@v3
            #   with:
            #       tag_name: ${{ github.ref }}
            #       release_name: Release ${{ github.ref }} Epsilon Version ${{ steps.build_epsilonjs.outputs.latest_tag }}
            #       body: |
            #           Epsilon Version: ${{ steps.build_epsilonjs.outputs.latest_tag }}
            #       files: "dist/**"
            #   env:
            #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
